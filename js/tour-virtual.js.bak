// Variáveis globais
let scene, camera, renderer, controls;
let currentScene = 'sala';
const loadingManager = new THREE.LoadingManager();

// Configurar gerenciador de carregamento
loadingManager.onProgress = function(url, itemsLoaded, itemsTotal) {
    console.log('Progresso:', itemsLoaded, 'de', itemsTotal);
    const progress = (itemsLoaded / itemsTotal * 100).toFixed(0);
    const loadingText = document.querySelector('.loading-content p');
    if (loadingText) {
        loadingText.textContent = `Carregando tour virtual... ${progress}%`;
    }
};

loadingManager.onError = function(url) {
    console.error('Erro ao carregar:', url);
    const loadingText = document.querySelector('.loading-content p');
    if (loadingText) {
        loadingText.textContent = 'Erro ao carregar recursos';
        loadingText.style.color = '#ff0000';
    }
};

loadingManager.onLoad = function() {
    console.log('Carregamento completo!');
    const loadingScreen = document.querySelector('.loading-screen');
    if (loadingScreen) {
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
            loadingScreen.style.display = 'none';
        }, 500);
    }
};

// Função de inicialização
function init() {
    try {
        console.log('Iniciando configuração do tour virtual...');
        
        // Garantir que o container existe
        const container = document.getElementById('tour-container');
        if (!container) {
            throw new Error('Container do tour virtual não encontrado');
        }

        // Configurar cena
        scene = new THREE.Scene();
        scene.background = new THREE.Color(0x1a1a1a);

        // Configurar câmera
        camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
        camera.position.set(0, 1.6, 3);

        // Configurar renderer
        renderer = new THREE.WebGLRenderer({ 
            antialias: true,
            powerPreference: "high-performance"
        });
        renderer.setSize(container.clientWidth, container.clientHeight);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        container.appendChild(renderer.domElement);

        // Configurar controles
        controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableZoom = false;
        controls.enablePan = false;
        controls.rotateSpeed = 0.5;
        controls.enableDamping = true;
        controls.dampingFactor = 0.1;
        controls.maxPolarAngle = Math.PI - 0.2;

        // Adicionar iluminação
        setupLights();
        
        // Criar sala
        createRoom();
        
        // Configurar redimensionamento
        window.addEventListener('resize', onWindowResize, false);

        // Iniciar animação
        animate();
        
        console.log('Inicialização concluída com sucesso');
        
        // Remover tela de carregamento
        loadingManager.onLoad();

    } catch (error) {
        console.error('Erro na inicialização:', error);
        const loadingText = document.querySelector('.loading-content p');
        if (loadingText) {
            loadingText.textContent = `Erro ao carregar: ${error.message}`;
            loadingText.style.color = '#ff0000';
        }
    }
}

// Configurar iluminação
function setupLights() {
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    const mainLight = new THREE.DirectionalLight(0xffffff, 0.8);
    mainLight.position.set(2, 4, 2);
    scene.add(mainLight);
}

// Criar sala
function createRoom() {
    // Dimensões da sala
    const roomWidth = 8;
    const roomHeight = 3;
    const roomDepth = 8;

    // Material padrão
    const material = new THREE.MeshPhongMaterial({ 
        color: 0xffffff,
    });

    // Criar paredes
    const wallGeometry = new THREE.BoxGeometry(0.1, roomHeight, roomDepth);

    // Parede esquerda
    const leftWall = new THREE.Mesh(wallGeometry, material);
    leftWall.position.set(-roomWidth/2, roomHeight/2, 0);
    scene.add(leftWall);

    // Parede direita
    const rightWall = new THREE.Mesh(wallGeometry, material);
    rightWall.position.set(roomWidth/2, roomHeight/2, 0);
    scene.add(rightWall);

    // Parede do fundo
    const backWallGeometry = new THREE.BoxGeometry(roomWidth, roomHeight, 0.1);
    const backWall = new THREE.Mesh(backWallGeometry, material);
    backWall.position.set(0, roomHeight/2, -roomDepth/2);
    scene.add(backWall);

    // Piso
    const floorGeometry = new THREE.PlaneGeometry(roomWidth, roomDepth);
    const floor = new THREE.Mesh(floorGeometry, material);
    floor.rotation.x = -Math.PI / 2;
    scene.add(floor);

    // Adicionar mobília básica
    addFurniture();
}

// Adicionar mobília
function addFurniture() {
    // Sofá
    const sofaGeometry = new THREE.BoxGeometry(2, 0.8, 0.8);
    const sofaMaterial = new THREE.MeshPhongMaterial({ color: 0x404040 });
    const sofa = new THREE.Mesh(sofaGeometry, sofaMaterial);
    sofa.position.set(0, 0.4, -2);
    scene.add(sofa);

    // Mesa de centro
    const tableGeometry = new THREE.BoxGeometry(1, 0.4, 0.6);
    const tableMaterial = new THREE.MeshPhongMaterial({ color: 0x8B4513 });
    const table = new THREE.Mesh(tableGeometry, tableMaterial);
    table.position.set(0, 0.2, -1);
    scene.add(table);

    // TV
    const tvGeometry = new THREE.PlaneGeometry(1.6, 0.9);
    const tvMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });
    const tv = new THREE.Mesh(tvGeometry, tvMaterial);
    tv.position.set(0, 1.5, -3.9);
    scene.add(tv);
}

// Função de animação
function animate() {
    requestAnimationFrame(animate);
    if (controls) controls.update();
    if (renderer && scene && camera) {
        renderer.render(scene, camera);
    }
}

// Redimensionamento
function onWindowResize() {
    if (!camera || !renderer) return;
    
    const container = document.getElementById('tour-container');
    camera.aspect = container.clientWidth / container.clientHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(container.clientWidth, container.clientHeight);
}

// Inicializar quando o DOM estiver pronto
window.addEventListener('load', init);